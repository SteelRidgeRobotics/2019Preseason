// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"


#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/TankDrive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    talonRightFront = RobotMap::driveTrainTalonRightFront;
    talonLeftFront = RobotMap::driveTrainTalonLeftFront;
    talonLeftRear = RobotMap::driveTrainTalonLeftRear;
    talonRightRear = RobotMap::driveTrainTalonRightRear;
    robotDrive = RobotMap::driveTrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}
void DriveTrain::userDrive(std::shared_ptr<Joystick>mainController) {
	double left_y = -1*mainController->GetRawAxis(1);
	double right_y = -1*mainController->GetRawAxis(5);
	if(fabs(left_y) < 0.1) {
		left_y = 0;
	}

	if(fabs(right_y) < 0.1) {
		right_y = 0;
	}

	int l_bump = mainController->GetRawButton(5);

	if(l_bump == 1) {
		left_y = -0.6*mainController->GetRawAxis(1);
		right_y = -0.6*mainController->GetRawAxis(5);
	}


}

// Put methods for controlling this subsystem
// here. Call these from Commands.

